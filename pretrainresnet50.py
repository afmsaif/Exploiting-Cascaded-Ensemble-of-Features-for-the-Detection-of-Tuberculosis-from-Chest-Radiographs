
#from keras.preprocessing import image
from tensorflow.keras.models import Model
#from keras.layers import Dense, GlobalAveragePooling2D
#from keras import backend as K
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2DTranspose, GlobalAveragePooling2D
from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization
from tensorflow.keras.callbacks import TensorBoard
import time
#from keras.applications.DenseNet169 import DenseNet169
from tensorflow.keras.layers import concatenate
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ReduceLROnPlateau , ModelCheckpoint
from keras.utils import plot_model
from keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
import pickle

%load_ext tensorboard

HEIGHT = 224
WIDTH = 224
NUM_CHANNELS = 3

pickle_in = open("/content/drive/My Drive/CXR_png/trans/X_test.pickle","rb")
X = pickle.load(pickle_in)

pickle_in = open("/content/drive/My Drive/CXR_png/trans/y_test.pickle","rb")
y = pickle.load(pickle_in)


X_train, X_val, y_train, y_val = train_test_split(X,y,test_size = .1)

y_train = tf.keras.utils.to_categorical(y_train, 2)
y_val = tf.keras.utils.to_categorical(y_val, 2)

# create the base pre-trained model
base_model = tf.keras.applications.ResNet50(weights=None, include_top=False)
base_model = base_model.load_weights('my_weights_file.h5')

# add a global spatial average pooling layer
x = base_model.output
x = tf.keras.layers.GlobalAveragePooling2D()(x)
# let's add a fully-connected layer
x = Dense(1024, activation='relu')(x)

predictions = Dense(2, activation='softmax')(x)

# this is the model we will train
model = Model(inputs=base_model.input, outputs=predictions)

#for layer in base_model.layers:
 #   layer.trainable = False

for layer in base_model.layers[:500]:
   layer.trainable = False
for layer in base_model.layers[500:]:
   layer.trainable = True



tensorboard = TensorBoard(log_dir="logs/{}".format(1))


datagen = ImageDataGenerator(
                                      rescale=1./255,
                                      rotation_range= 10,
                                      #width_shift_range=0.2,
                                      #height_shift_range=0.2,
                                      horizontal_flip=True,
                                      )
datagen_val = ImageDataGenerator(
                                      rescale=1./255,
            )

METRICS = [
                                keras.metrics.TruePositives(name='tp'),
                                keras.metrics.FalsePositives(name='fp'),
                                keras.metrics.TrueNegatives(name='tn'),
                                keras.metrics.FalseNegatives(name='fn'), 
                                keras.metrics.BinaryAccuracy(name='accuracy'),
                                keras.metrics.Precision(name='precision'),
                                keras.metrics.Recall(name='recall'),
                                keras.metrics.AUC(name='auc'),
                          ]
opt = tf.keras.optimizers.Adam(
                          learning_rate=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-07, amsgrad=False,
                           name='Adam'
                                     )


model.compile(loss='binary_crossentropy',
                          optimizer=opt,
                          metrics= METRICS,
                         )
                          

datagen.fit(X_train)
datagen_val.fit(X_val)
            #model.fit(X_train, y_train, batch_size= 50, epochs=200, validation_split= .05, callbacks=[tensorboard])
            #model.summary()
            
            #earlyStopping=EarlyStopping(monitor='val_loss', patience=10, verbose= 1, mode='auto')

            #lr_reduce = ReduceLROnPlateau(monitor='val_acc', factor=0.1, epsilon=0.0001, patience=2, verbose=1)
#filepath="weights-improvement-{epoch:02d}-{val_accuracy:.2f}.hdf5"
#checkpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
callbacks_list = [tensorboard]

batch_size = 64
#history = model.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size),
 #          epochs= 50, verbose=1,validation_data = datagen_val.flow(X_val, y_val, batch_size=batch_size), 
  #         callbacks= callbacks_list)

history = model.fit(X_train,y_train,validation_data = (X_val,y_val),epochs = 50,batch_size = 64,callbacks= [tensorboard])

model.save("densenet169.h5")
print("Saved model to disk")
